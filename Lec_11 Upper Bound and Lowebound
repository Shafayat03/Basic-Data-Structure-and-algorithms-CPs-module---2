 Discussed topics: 
1. Upper Bound
2. Lower Bound
3. Built-in lower-bound and upper-bound functions
4. Some properties of the upper bound and lower bound:
5. Number of values smaller than x = lo
6. Number of values greater or equal to x = n - lo
7. Number of values less than or equal to x = up
8. Number of values greater than x = n - up

source code : 
   1. lower bound
   2. upper bound

Google Classroom Tasks:

3. https://leetcode.com/problems/search-insert-position/description/
4. https://www.geeksforgeeks.org/problems/first-and-last-occurrences-of-x3116/1
5. https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/


//  source code : lower bound 



///   ***   ---   ||         In the name of ALLAH        |||   ---   ***   ///



#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;
typedef double dl;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define sz(x) (int)x.size()

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define file() freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {            cerr << endl;}
template < typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}

ll gcd ( ll a, ll b ) { return __gcd ( a, b ); }
ll lcm ( ll a, ll b ) { return a * ( b / gcd ( a, b ) ); }

const int mx = 1e5+123;
int a[mx];

int main()
{
    optimize();

    int n, q;
    cin >> n >> q;

    for ( int i = 0; i < n; i++ ) {
        cin >> a[i];
    }

    while ( q-- ) {
        int x;
        cin >> x;

        int lo = -1;
        int l = 0, r = n-1;

        while ( l <= r ) {
            int mid = ( l + r ) / 2;

            if ( a[mid] >= x ) {
                lo = mid;
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }

        if(lo == -1) lo = n;

        cout << lo << endl;
    }

    return 0;
}


// souce code 02 : lower bound 


///   ***   ---   ||         In the name of ALLAH        |||   ---   ***   ///



#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;
typedef double dl;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define sz(x) (int)x.size()

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define file() freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {            cerr << endl;}
template < typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}

ll gcd ( ll a, ll b ) { return __gcd ( a, b ); }
ll lcm ( ll a, ll b ) { return a * ( b / gcd ( a, b ) ); }

const int mx = 1e5+123;
int a[mx];

int main()
{
    optimize();

    int n, q;
    cin >> n >> q;

    for ( int i = 0; i < n; i++ ) {
        cin >> a[i];
    }

    while ( q-- ) {
        int x;
        cin >> x;

        int lo = -1;
        int l = 0, r = n-1;

        while ( l <= r ) {
            int mid = ( l + r ) / 2;

            if ( a[mid] >= x ) {
                lo = mid;
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }

        if(lo == -1) lo = n;

        cout << lo << endl;
    }

    return 0;
}





source code 03 : BUildin Upper & lower bound 

///   ***   ---   ||         In the name of ALLAH        |||   ---   ***   ///



#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;
typedef double dl;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define sz(x) (int)x.size()

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define file() freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {            cerr << endl;}
template < typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}

ll gcd ( ll a, ll b ) { return __gcd ( a, b ); }
ll lcm ( ll a, ll b ) { return a * ( b / gcd ( a, b ) ); }

int main()
{
    optimize();

    vector<int> v = { 3, 4, 6, 6, 6, 7, 8 };

    int x = 6;

    int lo = lower_bound ( v.begin(), v.end(), x ) - v.begin();

    cout << lo << endl;


    bool up = upper_bound ( v.begin(), v.end(), x ) - v.begin();

    cout << up << endl;

    return 0;
}





































SOlution of Task_03: 


class Solution {
public:
    int searchInsert(vector<int>& a, int x) {
        int n = a.size();
        int l = 0, r = n-1;
        int ans = n;
        
        while ( l <= r ) {
            int mid = (l + r) / 2;
            
            if ( a[mid] >= x ) {
                ans = mid;
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }

        return ans;
    }
};


SOlution of Task_o4:


SOlution of Task_05:


class Solution
{
    public:
    vector<int> find(int a[], int n , int x )
    {
        int fo = -1, lo = -1;
        
        int l = 0, r = n-1;
        
        while ( l <= r ) {
            int mid = ( l + r ) / 2;
            
            if ( a[mid] == x ) fo = mid;
            if ( a[mid] >= x ) {
                r = mid-1;
            }
            else {
                l = mid+1;
            }
        }
        
        l = 0, r = n-1;
        while ( l <= r ) {
            int mid = ( l + r ) / 2;
            
            if ( a[mid] == x ) lo = mid;
            if ( a[mid] <= x ) {
                l = mid+1;
            }
            else {
                r = mid-1;
            }
        }
        
        return {fo, lo};
    }
};




